FORMAT: 1A
HOST: http://api.example.com/api

# Mobile Webshop

This is a api documentation for a mobile webshop functionality.
This should cover mainly all operations which are currently available on the current client-server rendered shop.


## Authentication

This API uses JWT as a authentication layer.
The parameters that are needed to be sent are as follows:

+ `Authorization: Bearer {token}`
+ `Authorization: Bearer header.payload.signature`


## Customized content per application

In order to return customized content in the future i.e. desktop-web, mobile-web, mobile-native we should consider to identify yourself:

+ `X-Client-Application: mobile-web`
+ `X-Client-Application: desktop-web`

Default fallback will be desktop-web if nothing is provided






# Group Authentication

## Account creation

### Create account [POST /user]

+ Request (application/json)
    + Attributes (UserRegistration)

+ Response 200 (application/json)
    + Attributes (UserToken)

+ Response 409 (application/json)


## Token handling [/login]

### Authenticate as user [POST]

+ Request (application/json)
    + Attributes (UserAuthentication)

+ Response 200 (application/json)
    + Attributes (UserToken)

+ Response 401


### Authenticate as guest [POST /login/guest]

+ Request (application/json)
    + Attributes (UserAuthenticationGuest)

+ Response 200 (application/json)
    + Attributes (UserTokenGuest)

+ Response 409


### Regenerate token [POST /login/regenerate]

+ Request (application/json)
    + Headers
        Authentication: Bearer {token}

+ Response 200 (application/json)
    + Attributes (UserToken)

+ Response 401


### Delete Token / Force Logout [DELETE /login]

+ Request (application/json)
    + Headers
        Authentication: Bearer {token}

+ Response 204 (application/json)

+ Response 400 (application/json)

+ Response 409 (application/json)


## Reset password [/password]

### Trigger reset password [POST /password/reset]

+ Request (application/json)
    + Attributes (UserPasswordResetRequest)

+ Response 204 (application/json)

### Update password [POST /password]

+ Request (application/json)
    + Attributes (UserPasswordReset)

+ Response 202 (application/json)
    + Attributes (UserToken)









# Group Content

## Retrieve content by types [/content]

### Retrieve slider [GET /content-sliders/{id}]

+ Parameters
    + id: `homepage` (required, string) ... sliderIdentifier

+ Response 200 (application/json)
    + Attributes (ContentSliderCollection)

+ Response 404 (application/json)

+ Response 410 (application/json)

### Retrieve block [GET /content-blocks/{id}]

+ Parameters
    + id: `some-nice-identifier-mobile` (required, string) ... blockIdentifier

+ Response 200 (application/json)
    + Attributes (ContentBlock)

+ Response 404 (application/json)

+ Response 410 (application/json)


### Retrieve page [GET /content-pages/{id}]

+ Parameters
    + id: `some-page-identifier` (required, string) ... pageIdentifier

+ Response 200 (application/json)
    + Attributes (ContentPage)

+ Response 404 (application/json)

+ Response 410 (application/json)














# Group Catalog / Product Search

## Categories [/categories]

### List categories [GET]

+ Response 200 (application/json)
    + Attributes (CategoryCollection)


## Products [/products]

### Search through catalog [GET /products{?q,catId,campaign,browserUrl,limit,offset,sort,sortDir,additives,allergetics,characteristics}]

+ Parameters
    + q (optional, string, `Toma`) ... search term
    + campaign (optional, string, `zuckertuete`) ... campaign (i.e. from sliders)
    + catId (optional, integer, `2`) ... categoryId to filter for
    + browserUrl (optional, integer, `kase-eier-milchprodukte.html`) ... browserUrl, can be category or product - see type in response
    + limit (optional, integer, `10`) ... amount of elements for the result set (default: 10)
    + offset (optional, integer, `0`) ... offset from where to start search (default: 0)
    + sort (optional, string, `price`) ... sort mechanismn (one of: price, popularity)
    + sortDir (optional, string, `desc`) ... sort direction (one of: asc, desc)
    + additives (optional, array[integer], `10,12`) ... array of additives filterIds
    + allergetics (optional, array[integer], `10,12`) ... array of allergetic filterIds
    + characteristics (optional, array[integer], `10,12`) ... array of characteristics filterIds

+ Response 200 (application/json)
    + Attributes (ProductSearch)

### Retrieve product info [GET /products/{productId}]

+ Parameters
    + productId: `1230012` (required, string)

+ Response 200 (application/json)
    + Attributes (Product)
















# Group Shopping Cart

## Cart [/cart]

### Retrieve cart info [GET]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (Cart)

## Products [/cart/products/{productId}]

+ Parameters
    + productId: 1231231 (required, string) ... productId

### Add product [PUT]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}
    + Attributes (CartProductUpdate)

+ Response 200 (application/json)
    + Headers
        Authorization: Bearer {token}
    + Attributes (CartTotals)

+ Response 201 (application/json)
    + Attributes (CartTotals)

+ Response 409 (application/json)
    + Headers
        X-Description: Conflict (e.g. max possible quantity reached)

+ Response 422 (application/json)
    + Headers
        X-Description: Validation error (e.g. quantity or comment)

### Remove product [DELETE]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 204

+ Response 409 (application/json)
    + Headers
        X-Description: conflict (unable to remove from cart)


## Coupons / Vouchers [/cart/coupons/{code}]

+ Parameters
    + code: `ZEIT13` (required, string)

### Add coupon [PUT]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (CartTotals)

+ Response 201 (application/json)
    + Attributes (CartTotals)

+ Response 409
    + Headers
        X-Description: conflict (voucher could not be applied, unknown, expired, ...)

### Remove coupon [DELETE]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 204 (application/json)














# Group Capacity management

## Capacities [/capacities{?zipCode,startDate,endDate}]

### Retrieve capacity slots [GET /capacities{?zipCode,startDate,endDate}]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Parameters
    + zipCode (required, string, `12312`) ... zipcode where you want to fetch the capacity for
    + startDate (required, datetime, ``) ... start date for the matrix
    + endDate (required, datetime, ``) ... end date for the matrix

+ Response 200 (application/json)
    + Body
    
        {
            "days": [
                "2016-09-05",
                "2016-09-06",
                "2016-09-07"
            ],
            "capacities": [{
                "startTime": "06:00:00+2000",
                "endTime": "08:00:00+2000",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "outdated",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "full",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }]
        }

### Reserve a capacity slot [POST /capacities/{capacityId}]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Parameters
    + capacityId (required, string, `a38914b5-5988-436d-bd6c-8c0a7edaacd5`) ... capacityId

+ Response 200 (application/json)
    + Attributes (CapacityReservation)


## Reservations [/capacity-reservations/{id}]

+ Parameters
    + id (required, string, `a38914b5-5988-436d-bd6c-8c0a7edaacd5`) ... reservation identifier

### Retrieve reservation info [GET]

+ Response 200 (application/json)
    + Attributes (CapacityReservation)























# Group Checkout

## Checkout methods

### Retrieve payment methods [GET /user/payments]

+ Response 200 (application/json)
    + Attributes (PaymentCollection)

### Create a new order [POST /user/orders]

+ Request (application/json)
    + Attributes (UserOrderCreate)

+ Response 201 (application/json)
    + Attributes (UserOrder)

+ Response 409

+ Response 422





















# Group User account

## Account handling [/user]

### Retrieve account [GET /user]

+ Response 200 (application/json)
    + Attributes (UserAccount)

### Update account [PUT /user]

+ Request
    + Headers
        Authorization: Bearer {token}
    + Attributes (UserAccountUpdate)

+ Response 204 (application/json)

+ Response 409 (application/json)





## Address handling [/user/addresses]

### List addresses [GET /user/addresses]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (AddressCollection)


### Create new address [POST /user/addresses]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

    + Attributes (Address)

+ Response 201 (application/json)
    + Attributes (AddressRead)

+ Response 409 (application/json)
    + Attributes (AddressRead)

+ Response 422 (application/json)
    + Attributes (AddressRead)

### Retrieve specific address [GET /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (AddressRead)

### Update specific address [PUT /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 204 (application/json)

### Delete specific address [DELETE /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 204 (application/json)







## Favorites handling [/user/favorites]

### List Favorites [GET /user/favorites]

+ Response 200 (application/json)
    + Attributes (Favorites)


### Delete favorite [DELETE /user/favorites/{productId}]

+ Parameters
    + productId: `2131241` (required, string) ... productId of the product to remove from favs

+ Response 204 (application/json)





## Order handling [/user/orders]

### List user orders [GET /user/orders]

+ Response 200 (application/json)
    + Attributes (UserOrderCollection)

### Retrieve order info [GET /user/orders/{orderId}]

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId

+ Response 200 (application/json)
    + Attributes (UserOrder)

+ Response 404

### Cancel order [POST /user/orders/{orderId}/cancel]

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId to cancel

+ Request (application/json)
    + Attributes (UserOrderCancelation)

+ Response 202 (application/json)

+ Response 409


### Update order [POST /user/orders/{orderId}/reorder]

+ Parameters
    + orderId: 1019558370 (required, string)

+ Response 202 (application/json)
    + Attributes (CartTotals)

+ Response 409


### Add order items to shopping cart [POST /user/orders/{orderId}/cart]

+ Parameters
    + orderId: 1019558370 (required, integer)

+ Response 200 (application/json)
    + Attributes (CartTotals)














# Data Structures

## Address (object)


### Properties
+ `type`: billing, shipping (required, enum[string])
+ `gender`: male|female|company (required, enum[string])
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `street`: Friedrichstraße (required, string)
+ `housenumber`: 2010 (required, string)
+ `zipcode`: 10551 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `hint`: 1st Floor, Last Door (required, string)
+ `elevator`: true (required, boolean)
+ `floor`: 1 (required, number)
+ `phonenumber`: 00493012345678 (required, string)


## AddressRead (object)


### Properties
+ `addressId`: 1001241 (required, string)
+ `default`: true (required, boolean)
+ `name`: My custom address name (required, string)
+ `type`: billing, shipping (required, enum[string])
+ `gender`: male|female|company (required, enum[string])
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `street`: Friedrichstraße (required, string)
+ `housenumber`: 2010 (required, string)
+ `zipcode`: 10551 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `hint`: 1st Floor, Last Door (required, string)
+ `elevator`: true (required, boolean)
+ `floor`: 1 (required, number)
+ `phonenumber`: 00493012345678 (required, string)


## AddressCollection (object)


### Properties
+ `shipping` (required, array[AddressRead])
+ `billing` (required, array[AddressRead])


## CapacitySlotMeta (object)


### Properties
+ `id` (optional, string)
+ `startTime` (optional, string)
+ `endTime` (optional, string)


## CapacityCollection (object)


### Properties
+ `zipCode` (optional, string)
+ `startDate` (optional, string)
+ `endDate` (optional, string)
+ `slots` (array[CapacitySlotMeta], optional)
+ `days` (array[CapacityDayCollection], optional)


## CapacityDayCollection (object)


### Properties
+ `date` (optional, string)
+ `slots` (array[CapacityDaySlot], optional)


## CapacityDaySlot (object)


### Properties
+ `id` (optional, string)
+ `slot` (required, number)
+ `status` (optional, string)
+ `price` (required, number)


## CapacityReservation (object)


### Properties
+ `id` (optional, string)
+ `startDateTime` (optional, string)
+ `endDateTime` (optional, string)
+ `expiryDateTime` (optional, string)
+ `price` (required, number)


## Cart (object)


### Properties
+ `products` (array[Product], optional)
+ `vouchers` (array[Voucher], optional)
+ `totals` (CartTotals, optional)


## Product (object)


### Properties
+ `id` (optional, string)
+ `sku` (optional, string)
+ `name` (optional, string)
+ `description` (optional, string)
+ `manufacturer` (optional, string)
+ `brand` (optional, string)
+ `available` (boolean, optional)
+ `images` (ProductImages, optional)
+ `units` (array[ProductUnit], optional)
+ `prices` (ProductPrice, optional)
+ `packing` (ProductPacking, optional)
+ `nutrition` (ProductNutrition, optional)
+ `additional` (ProductAdditional, optional)
+ `attributes` (Attributes, optional)


## ProductImages (object)


### Properties
+ `list` (object, optional)
+ `detail` (array[object], optional)


## ProductUnit (object)


### Properties
+ `id` (required, number)
+ `name` (required, string)
+ `default` (boolean, optional)


## ProductPrice (object)


### Properties
+ `_exampleFormula` (optional, string)
+ `_exampleValues` (optional, string)
+ `price` (required, number)
+ `specialPrice` (required, number)
+ `specialPriceDiscount` (required, number)
+ `basePrice` (required, number)
+ `basePriceCalcValue` (required, number)
+ `basePriceCalcUnit` (optional, string)
+ `deposit` (required, number)


## ProductPacking (object)


### Properties
+ `_exampleFormula1` (optional, string)
+ `_exampleFormula2` (optional, string)
+ `_exampleFormula3` (optional, string)
+ `_exampleFormula4` (optional, string)
+ `quantity` (optional, string)
+ `baseQuantity` (required, number)
+ `unit` (optional, string)
+ `circa` (boolean, optional)
+ `innerPackingType` (optional, string)
+ `outerPackingType` (optional, string)


## ProductNutrition (object)


### Properties
+ `reference_value` (optional, string)
+ `calories` (optional, string)
+ `cabohydrates` (optional, string)
+ `fat` (optional, string)
+ `fatSaturated` (optional, string)
+ `fatUnsaturated` (optional, string)
+ `fiber` (optional, string)
+ `proteins` (optional, string)
+ `sodium` (optional, string)
+ `sugar` (optional, string)
+ `alcohol` (optional, string)


## ProductAdditional (object)


### Properties
+ `legalText` (optional, string)
+ `tradingClass` (optional, string)
+ `ingredients` (optional, string)
+ `additives` (optional, string)
+ `allergenics` (optional, string)
+ `additional` (optional, string)
+ `warehousing` (optional, string)
+ `antioxidants` (optional, string)
+ `characteristic` (optional, string)


## Attributes (object)


### Properties
+ `characteristics` (array[ProductAttribute], optional)
+ `additives` (array[ProductAttribute], optional)
+ `allergetics` (array[ProductAttribute], optional)


## ProductAttribute (object)


### Properties
+ `id` (required, number)
+ `name` (optional, string)


## Voucher (object)


### Properties
+ `type` (optional, string)
+ `name` (optional, string)
+ `code` (optional, string)


## CartTotals (object)


### Properties
+ `minimumOrderValue`: 35.00 (required, number) ... mindest bestellwert
+ `subtotal`: 10.00 (required, number) ... subtotal without vouchers and deductions
+ `customerCreditBalance`: 1.50 (required, number) ... kunden guthaben
+ `deposit`: 3.50 (required, number) ... pfand
+ `delivery`: 4.00 (required, number) ... delivery costs
+ `beverages`: 1.00 (required, number) ... getränke lieferzuschlag
+ `grandtotal`: 17.50 (required, number) ... total including all additional costs


## CartProductUpdate (object)


### Properties
+ `quantity`: 200 (required, number)
+ `unitId`: 17 (required, number)
+ `comment` (optional, string)


## Category (object)


### Properties
+ `id` (required, number)
+ `level` (required, number)
+ `name` (required, string)
+ `children` (required, array[SubCategory])


## SubCategory (object)


### Properties
+ `id` (required, number)
+ `level` (required, number)
+ `name` (required, string)
+ `children` (optional, array[SubCategory])


## CategoryCollection (object)

### Properties
+ `categories` (required, array[Category])

## ContentBlock (object)
+ `identifier`: `surcharge_info` (required, string)
+ `title`: `Beverage Delivery Charge` (required, string)
+ `content`: `Ab der 4. Getr&auml;nkekiste berechnen wir 0.50 &euro; Zuschlag pro Kiste. Wir behalten uns vor, bei Bestellmengen von mehr als 8 Kisten, diese zu reduzieren.` (required, string)

## ContentPage (object)
+ `identifier`: `privacy-policy-cookie-restriction-mode` (required, string)
+ `title`: `Datenschutzerklärung` (required, string)
+ `headline`: `Datenschutzerklärung` (required, string)
+ `content`: `<p>Verantwortlich f&uuml;r den Inhalt und Vertragspartner f&uuml;r alle Bestellungen...` (required, string)

## ContentSliderCollection (object)
+ sliders (required, array[ContentSlider])

## ContentSlider (object)
+ imageUrl: `http://static.exmaple.com/image.png` (required, string)
+ campaign: zuckertuete (required, string)

## Favorites (object)
+ `categories` (required, array[FavoriteCategory])

## FavoriteCategory (object)
+ `id` (required, number)
+ `name` (required, string)
+ `total` (required, number)
+ `products` (required, array[Product])

## Payment (object)
+ `method` (required, string)

## PaymentCollection (object)
+ `payments` (required, array[Payment])

## ProductSearchFilter (object)
+ `id` (required, number)
+ `name` (required, string)
+ `total` (required, number)

## ProductSearchFilterCategory (object)
+ `level` (required, number)

## ProductSearch (object)
+ `totalElements` (required, number)
+ `type`: category, product (required, enum[string])
+ `products` (required, array[Product])
+ `categories` (required, array[ProductSearchFilterCategory])
+ `filters` (required, Filters)

## Filters (object)
+ `characteristics` (required, array[ProductSearchFilter])
+ `allergetics` (required, array[ProductSearchFilter])
+ `additives` (required, array[ProductSearchFilter])

## UserOrderCollection (object)
+ `orders` (required, array[UserOrderShort])


## UserOrderShort (object)
+ `orderId` (required, string)
+ `createdAt` (required, string)
+ `customerId` (required, string)
+ `status` (required, string)
+ `canChange` (required, boolean)
+ `canCancel` (required, boolean)
+ `payment` (required, string)
+ `totals` (required, CartTotals)
+ `reservation` (required, CapacityReservation)
+ `productsCount` (required, number)
+ `products` (required, array[Product])


## UserOrder (object)
+ `orderId` (required, string)
+ `createdAt` (required, string)
+ `customerId` (required, string)
+ `status` (required, string)
+ `canChange` (required, boolean)
+ `canCancel` (required, boolean)
+ `payment` (required, string)
+ `totals` (required, CartTotals)
+ `reservation` (required, CapacityReservation)
+ `productsCount` (required, number)
+ `products` (required, array[Product])
+ `billing` (required, Address)
+ `shipping` (required, Address)


## UserOrderCancelation (object)
+ `reason` (required, string)


## UserOrderCreate (object)
+ `shippingAddressId` (required, string)
+ `billingAddressId` (required, string)
+ `reservationId` (optional, string)
+ `payment` (required, Payment39)


## Payment39 (object)
+ `method`: paypal (required, string)
+ `default`: true (required, boolean)
+ `options` (required, object)


## UserOrderProductCollection (object)
+ `products` (required, array[Product])

## UserToken (object)
+ `token`: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxNDhhNjcyNC03YzE4LTQ5YzgtYTU2My03MzYxMjQ4NDFhYWEiLCJzdWIiOiIxMDAwMCIsImlhdCI6MTIzMTIzMTI0LCJleHAiOjEyMzEyMzEyNCwicm9sZSI6InVzZXIifQ.jBWr633JVC1c7rH3x4NgsGaCfKr3SVJfz8q5kXRV1II` (required, string)

## UserTokenGuest (object)
+ `token`: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Mzg0MzAiLCJpYXQiOjEyMzEyMzEyNCwiZXhwIjoxMjMxMjMxMjQsInJvbGUiOiJndWVzdCJ9.k2VGkZl9JSD69s0es6hay9dx_Dhu6cthkVDrnkdsJW8` (required, string)

## UserPassword (object)
+ `password`: `my-new-password` (required, string)

## UserPasswordResetRequest (object)
+ `email`: `john.doe@example.net` (required, string)

## UserPasswordReset (object)
+ `_example_incoming_url`: `/#/customer/account/resetpassword/?id=:id&token=:token`
+ `id`: `id-param-from-url` (required, string)
+ `token`: `token-param-from-url` (required, string)
+ `password`: `my-new-password` (required, string) 

## UserAuthentication (object)
+ email: `john.doe@example.com` (required, string)
+ password: `my-secret-password` (required, string)

## UserAuthenticationGuest (object)
+ zipCode: `80333` (required, number)

## UserAccount (object)
+ `id`: 123123 (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `newsletter`: false (required, boolean)
+ `email`: john.doe@example.com (required, string)
+ `shipping` (required, Address)

## UserAccountUpdate (object)
+ `newsletter`: true (required, boolean)

## UserRegistration (object)
+ `email`: john.doe@example.com (required, string)
+ `password`: `my-secret-password` (required, string)
+ `gender`: male, female, company (required, enum[string])
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `birthdate`: `1989-01-01` (required, string)
+ `newsletter`: false (required, boolean)
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)