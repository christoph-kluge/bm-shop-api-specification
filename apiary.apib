FORMAT: 1A
HOST: http://api.example.com/api

# Mobile Webshop

This is a api documentation for a mobile webshop functionality.
This should cover mainly all operations which are currently available on the current client-server rendered shop.


## Authentication

This API uses JWT as a authentication layer.
The parameters that are needed to be sent are as follows:

+ `Authorization: Bearer {token}`
+ `Authorization: Bearer header.payload.signature`

## Error Messages

In order to provide all possible error messages. We splitted the return into numeric keys.
As soon as implemented you'll only receive one error-code like:

```
{
  "error": "ERROR_MESSAGE",
  "errors": []
}
```

## Customized content per application

In order to return customized content in the future i.e. desktop-web, mobile-web, mobile-native we should consider to identify yourself:

+ `X-Client-Application: mobile-web`
+ `X-Client-Application: desktop-web`

Default fallback will be desktop-web if nothing is provided






# Group Authentication

## Account creation

### Create account [POST /user]

+ Request (application/json)
    + Attributes (UserRegistration)

+ Response 200 (application/json)
    + Attributes (UserToken)


## Token handling [/login]

### Authenticate as user [POST]

+ Request (application/json)
    + Attributes (UserAuthentication)

+ Response 201 (application/json)
    + Attributes (UserToken)

+ Response 400 (application/json)
    + Attributes (ResponseLoginBadRequest)

+ Response 401
    + Attributes (ResponseTokenUnauthorized)


### Authenticate as guest [POST /login/guest]

+ Request (application/json)
    + Attributes (UserAuthenticationGuest)

+ Response 201 (application/json)
    + Attributes (UserTokenGuest)

+ Response 400 (application/json)
    + Body

        {
            "error1": "ZIPCODE_MISSING"
        }

+ Response 409 (application/json)
    + Body

        {
            "error": "ZIPCODE_NOT_SUPPORTED"
        }


### Regenerate token [POST /login/regenerate]

+ Request (application/json)
    + Headers
        Authentication: Bearer {token}

+ Response 200 (application/json)
    + Attributes (UserToken)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseTokenUnauthorized)


### Delete Token / Force Logout [DELETE /login]

+ Request (application/json)
    + Headers
        Authentication: Bearer {token}

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseTokenUnauthorized)


## Reset password [/password]

### Trigger reset password [POST /password/reset]

+ Request (application/json)
    + Attributes (UserPasswordResetRequest)

+ Response 204 (application/json)
    
+ Response 400 (application/json)
    + Attributes (ResponseRequestResetPasswordBadRequest)

### Update password [POST /password]

+ Request (application/json)
    + Attributes (UserPasswordReset)

+ Response 202 (application/json)
    + Attributes (UserToken)
    
+ Response 400 (application/json)
    + Attributes (ResponseResetPasswordBadRequest)
    
+ Response 409 (application/json)
    + Attributes (ResponseResetPasswordConflict)






# Group Newsletter

## Newsletter [/newsletter]

### Subscribe to newsletter [POST /newsletter/subscribe]

+ Request
    + Attributes (UserNewsletter)

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseUserNewsletterBadRequest)

+ Response 409 (application/json)
    + Attributes (ResponseUserNewsletterConflict)

### Unsubscribe from newsletter [POST /newsletter/unsubscribe]

+ Request
    + Attributes (UserNewsletter)

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseUserNewsletterBadRequest)

+ Response 409 (application/json)
    + Attributes (ResponseUserNewsletterConflict)
    






# Group Content

## Retrieve content by types [/content]

### Retrieve slider [GET /content-sliders/{id}?{zipcode}]

+ Parameters
    + id: `homepage` (required, string) ... sliderIdentifier
    + zipcode: `10115` (required, string) ... zipcode

+ Response 200 (application/json)
    + Attributes (ContentSliderCollection)

+ Response 404 (application/json)

+ Response 410 (application/json)

### Retrieve block [GET /content-blocks/{id}]

+ Parameters
    + id: `some-nice-identifier-mobile` (required, string) ... blockIdentifier

+ Response 200 (application/json)
    + Attributes (ContentBlock)

+ Response 404 (application/json)

+ Response 410 (application/json)


### Retrieve page [GET /content-pages/{id}]

+ Parameters
    + id: `some-page-identifier` (required, string) ... pageIdentifier

+ Response 200 (application/json)
    + Attributes (ContentPage)

+ Response 404 (application/json)

+ Response 410 (application/json)














# Group Catalog / Product Search

## Categories [/categories]

### List categories [GET]

+ Response 200 (application/json)
    + Attributes (CategoryCollection)


## Products [/products]

### Search through catalog [GET /products]

+ Parameters
    + zipcode (required, string, 12312) ... zipcode for catalog selection
    + q (required, string, `Toma`) ... search term
    + campaign (optional, string, `zuckertuete`) ... campaign (i.e. from sliders)
    + catId (optional, integer, `2`) ... categoryId to filter for
    + catLevel (optional, integer, `2`) ... categoryLevel to reduce category filter (mostly you choose catId and add +1 to the same level) 
    + browserUrl (optional, integer, `kase-eier-milchprodukte.html`) ... browserUrl, can be category or product - see type in response
    + limit (optional, integer, `10`) ... amount of elements for the result set (default: 10)
    + offset (optional, integer, `0`) ... offset from where to start search (default: 0)
    + sort (optional, string, `price`) ... sort mechanismn (one of: relevance, price, popularity)
    + sortDir (optional, string, `desc`) ... sort direction (one of: asc, desc)
    + filter[customFilterId] (optional, array[integer], `10,12`) ... customFilterItemIds

+ Response 200 (application/json)
    + Attributes (ProductSearch)

### Retrieve product info [GET /products/{productId}?zipcode=80333]

+ Parameters
    + productId: `1230012` (required, string)
    + zipcode: `80333` (required, string)

+ Response 200 (application/json)
    + Attributes (Product)
















# Group Shopping Cart

## Cart [/cart]

### Retrieve cart info [GET]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseCartUnauthorized)

## Products [/cart/products/{productId}]

+ Parameters
    + productId: 1231231 (required, string) ... productId

### Add product [PUT]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}
    + Attributes (CartProductUpdate)

+ Response 200 (application/json)
    + Headers
        X-Description: Product in cart was updated
    + Attributes (Cart)
    
+ Response 201 (application/json)
    + Headers
        X-Description: Product is new in cart
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseCartAddProductBadRequest)

+ Response 401
    + Attributes (ResponseCartUnauthorized)
    
+ Response 404 (application/json)

+ Response 409 (application/json)
    + Attributes (ResponseCartAddProductConflict)

+ Response 422 (application/json)
    + Attributes (ResponseCartAddProductValidation)

### Remove product [DELETE]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseCartUnauthorized)

+ Response 404 (application/json)


## Coupons / Vouchers [/cart/coupons/{code}]

+ Parameters
    + code: `ZEIT13` (required, string)

### Add coupon [PUT]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 201 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseCartUnauthorized)

+ Response 409 (application/json)
    + Attributes (ResponseCartAddCouponConflict)

+ Response 422 (application/json)
    + Attributes (ResponseCartAddCouponValidationFailed)

### Remove coupon [DELETE]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401
    + Attributes (ResponseCartUnauthorized)

+ Response 404

+ Response 422 (application/json)
    + Attributes (ResponseCartRemoveCouponValidationFailed)











# Group Capacity management

## Capacities [/cart/capacityslots]

### Retrieve slots [GET /cart/capacities{?addressId,startDate,endDate}]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Parameters
    + addressId: 12312241 (required, string) ... addressId which should be used for shipping
    + startDate: `2016-09-05` (required, string) ... start date for capacities
    + endDate: `2016-09-07` (required, string) ... end date for capacities

+ Response 200 (application/json)
    + Body

        {
            "days": [
                "2016-09-05",
                "2016-09-06",
                "2016-09-07"
            ],
            "capacities": [{
                "startTime": "06:00:00+0200",
                "endTime": "08:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "07:00:00+0200",
                "endTime": "09:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 2
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 2
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 4
                }]
            }, {
                "startTime": "08:00:00+0200",
                "endTime": "10:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "09:00:00+0200",
                "endTime": "11:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "10:00:00+0200",
                "endTime": "12:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "11:00:00+0200",
                "endTime": "13:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "12:00:00+0200",
                "endTime": "14:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "13:00:00+0200",
                "endTime": "15:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "14:00:00+0200",
                "endTime": "16:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "15:00:00+0200",
                "endTime": "17:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "16:00:00+0200",
                "endTime": "18:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "closed",
                    "price": 2
                }]
            }, {
                "startTime": "17:00:00+0200",
                "endTime": "19:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "full",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "full",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }, {
                "startTime": "18:00:00+0200",
                "endTime": "20:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "closed",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }, {
                "startTime": "19:00:00+0200",
                "endTime": "21:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "closed",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }, {
                "startTime": "20:00:00+0200",
                "endTime": "22:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "closed",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }, {
                "startTime": "21:00:00+0200",
                "endTime": "23:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "closed",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }, {
                "startTime": "22:00:00+0200",
                "endTime": "00:00:00+0200",
                "slots": [{
                    "day": "2016-09-05",
                    "slotId": "0d47f84a-5efb-45a0-b088-e86a37bfb50b",
                    "status": "closed",
                    "price": 4
                }, {
                    "day": "2016-09-06",
                    "slotId": "bb420fce-66f7-4ea3-81f7-9ad8a4d4a142",
                    "status": "available",
                    "price": 3
                }, {
                    "day": "2016-09-07",
                    "slotId": "54275b11-5430-41fa-b5ce-8b2b5485eecb",
                    "status": "available",
                    "price": 2
                }]
            }]
        }

+ Response 400 (application/json)
    + Attributes (ResponseCapacitiesBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 422 (application/json)
    + Attributes (ResponseCapacitiesValidation)

### Reserve a capacity slot [POST]

+ Request (application/json)
    + Attributes (CapacityReservationRequest)

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404

+ Response 409 (application/json)
    + Attributes (ResponseCapacityReservationConflict)


### Get current reserved slot [GET]

+ Response 200 (application/json)
    + Attributes (CapacityReservation)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404





















# Group Checkout

## Checkout methods

### Retrieve payment methods [GET /user/payments]

+ Response 200 (application/json)
    + Attributes (PaymentCollection)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)
    
### Create paypal token [POST /user/payments/paypal/token]

+ Request (application/json)
    + Attributes (UserOrderPaymentPaypalRequest)

+ Response 201 (application/json)
    + Attributes (ResponsePaymentPaypalTokenCreated)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)
    
+ Response 409 (application/json)
    + Attributes (ResponsePaymentPaypalTokenConflict)
    
+ Response 504 (application/json)
    + Attributes (ResponsePaymentPaypalTokenGatwayTimeout)

### Create a new order [POST /user/orders]

+ Request (application/json)
    + Attributes (UserOrderCreate)

+ Response 202 (application/json)
    + Attributes (UserOrder)

+ Response 400 (application/json)
    + Attributes (ResponseCreateOrderBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 422 (application/json)
    + Attributes (ResponseCreateOrderValidation)







# Group User account

## Account handling [/user]

### Retrieve account [GET /user]

+ Response 200 (application/json)
    + Attributes (UserAccount)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)






## Address handling [/user/addresses]

### List addresses [GET /user/addresses]

+ Request
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (AddressCollection)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)


### Create new address [POST /user/addresses]

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

    + Attributes (Address)

+ Response 201 (application/json)
    + Attributes (AddressRead)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 409 (application/json)
    + Attributes (AddressRead)

+ Response 422 (application/json)
    + Headers
        Location: /user/addresses/{id}
    + Body 
        {
          "error": "ADDRESS_VALIDATION",
          "errors": {
            "street": {
              "old": "Beusselstraieß",
              "new": "Beusselstr."
            },
            "housenumber": {
              "old": "44n-q",
              "new": "44 n-q"
            }
          }
        }

### Retrieve specific address [GET /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (AddressRead)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404

### Update specific address [PUT /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

    + Attributes (Address)

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404

+ Response 422 (application/json)
    + Body 
        {
          "error": "ADDRESS_VALIDATION",
          "errors": {
            "street": {
              "old": "Beusselstraieß",
              "new": "Beusselstr."
            },
            "housenumber": {
              "old": "44n-q",
              "new": "44 n-q"
            }
          }
        }

### Delete specific address [DELETE /user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with

+ Request (application/json)
    + Headers
        Authorization: Bearer {token}

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404








## Favorites handling [/user/favorites]

### List Favorites [GET /user/favorites]

+ Response 200 (application/json)
    + Attributes (Favorites)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)


### Delete favorite [DELETE /user/favorites/{productId}]

+ Parameters
    + productId: `2131241` (required, string) ... productId of the product to remove from favs

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404







## Order handling [/user/orders]

### List user orders [GET /user/orders]

+ Response 200 (application/json)
    + Attributes (UserOrderCollection)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

### Retrieve order info [GET /user/orders/{publicId}]

+ Parameters
    + publicId: 1019558370 (required, string) ... publicId

+ Response 200 (application/json)
    + Attributes (UserOrder)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404

### Cancel order [PUT /user/orders/{orderId}]

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId to cancel

+ Request (application/json)
    + Attributes (UserOrderCancelation)

+ Response 204 (application/json)

+ Response 400 (application/json)
    + Attributes (ResponseUserOrderCancellationBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)

+ Response 404 (application/json)

+ Response 409 (application/json)
    + Attributes (ResponseUserOrderCancellationConflict)


### Add order items to shopping cart [POST /user/orders/{orderId}/cart]

+ Parameters
    + orderId: 1019558370 (required, integer)

+ Response 200 (application/json)
    + Attributes (Cart)

+ Response 400 (application/json)
    + Attributes (ResponseTokenBadRequest)

+ Response 401 (application/json)
    + Attributes (ResponseTokenUnauthorized)














# Data Structures

## Address (object)
+ `type`: billing, shipping (required, enum[string])
+ `name`: `My Office Address` (required, string)
+ `title`: Dr., Prof., Prof. Dr. (required, enum[string])
+ `gender`: male, female, company (required, enum[string])
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `street`: Friedrichstraße (required, string)
+ `housenumber`: 2010 (required, string)
+ `city`: Berlin (required, string)
+ `zipcode`: 10551 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `hint`: 1st Floor, Last Door (required, string)
+ `elevator`: true (required, boolean)
+ `floor`: 1 (required, number)
+ `phonenumber`: 00493012345678 (required, string)

## AddressRead (object)
+ `addressId`: 1001241 (required, string)
+ `name`: `My Office Address` (required, string)
+ `gender`: male, female, company (required, enum[string])
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `street`: Friedrichstraße (required, string)
+ `housenumber`: 2010 (required, string)
+ `zipcode`: 10551 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `hint`: 1st Floor, Last Door (required, string)
+ `elevator`: true (required, boolean)
+ `floor`: 1 (required, number)
+ `phonenumber`: 00493012345678 (required, string)

## AddressRead2 (object)
+ `addressId`: 1001242 (required, string)
+ `name`: `My Private Address` (required, string)
+ `gender`: male, female, company (required, enum[string])
+ `company`: `` (required, string)
+ `department`: `` (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `street`: Friedrichstraße (required, string)
+ `housenumber`: 2010 (required, string)
+ `zipcode`: 10551 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `hint`: 1st Floor, Last Door (required, string)
+ `elevator`: true (required, boolean)
+ `floor`: 1 (required, number)
+ `phonenumber`: 00493012345678 (required, string)

## AddressCollection (object)
+ defaultShippingId: 1001241 (required, string)
+ defaultBillingId: null (required, string)
+ addresses (required, array[AddressRead, AddressRead2])

## CapacityReservationRequest (object)
+ slotId: `a38914b5-5988-436d-bd6c-8c0a7edaacd5` (required, string) ... slot to reserve
+ addressId: `a38914b5-5988-436d-bd6c-8c0a7edaacd5` (required, string) ... address id to map to

## CapacityReservation (object)
+ `id`: `4575e652-4461-462a-98c2-a3aa451bf448` (required, string)
+ `startDateTime`: `2016-08-15T07:00:00+0200` (required, string)
+ `endDateTime`: `2016-08-15T09:00:00+0200` (required, string)
+ `expiryDateTime`: `2016-08-11T16:13:26+0200` (required, string)
+ `price`: 2.00 (required, number)

## Product (object)
+ id: 62073 (required, string)
+ rootCategoryId: 1234 (required, number)
+ sku: `1406271` (required, string)
+ name: `Veuve Clicquot Ponsardin Champagne Brut` (required, string)
+ browserUrl: `veuve-clicquot-brut-0-75l.html` (required, string)
+ packing: `ca. 390g Packung` (required, string)
+ isAvailable: `true` (required, boolean)
+ isSpecialPrice: `true` (required, boolean)
+ isBasePrice: `true` (required, boolean)
+ icons (required, array[ProductIcon])
+ images (required, ProductImages)
+ units (required, array[ProductUnit])
+ prices (required, ProductPrice)
+ ingredients (required, ProductIngredients)
+ features (required, array[ProductFeature])
+ nutrition (required, ProductNutrition)
+ content (required, ProductContent)

## ProductContent (object)
+ description: `Pfirsiche, halbe Frucht, gezuckert` (required, string)
+ hint: `Die tatsächlich Verpackung kann hier von der hier...` (required, string)

## ProductUnit (object)
+ id: 57 (required, number)
+ name: Stück (required, string)
+ `default`: true (required, boolean)

## ProductPrice (object)
+ price: 7.99 (required, number)
+ specialPrice: 6.99 (required, number)
+ specialDiscount: 11 (required, number)
+ specialStartDate: `2016-08-01` (required, string)
+ specialEndDate: `2016-08-07` (required, string)
+ basePrice: 4.00 (required, number)
+ baseUnit: 1kg (required, string)
+ deposit: 3.30 (required, number)

## ProductImages (object)
+ list (required, ProductListImage)
+ detail (required, array[ProductDetailImage])

## ProductIcon (object)
+ id: 63 (required, number)
+ name: Tiefgekühlt (required, string)
+ imgUrl: `http://cdn.bringmister.de/images/1ist/43.png` (required, string)

## ProductListImage (object)
+ 43: `http://cdn.bringmister.de/images/1ist/43.png` (required, string)
+ 90: `http://cdn.bringmister.de/images/1ist/90.png` (required, string)
+ 117: `http://cdn.bringmister.de/images/1ist/117.png`(required, string)
+ 120: `http://cdn.bringmister.de/images/1ist/120.png`(required, string)

## ProductDetailImage (object)
+ 58: `http://cdn.bringmister.de/images/detail/1/58.png`(required, string)
+ 90: `http://cdn.bringmister.de/images/detail/1/90.png`(required, string)
+ 268: `http://cdn.bringmister.de/images/detail/1/268.png`(required, string)
+ 495: `http://cdn.bringmister.de/images/detail/1/495.png`(required, string)
+ 1795: `http://cdn.bringmister.de/images/detail/1/1795.png`(required, string)

## ProductNutrition (object)
+ reference: `100g` (required, string)
+ items: (required, array[ProductNutritionItem])

## ProductNutritionItem (object)
+ code: `calories` (required, string)
+ label: `Brennwert` (required, string)
+ value: `330 kcal` (required, string)

## ProductIngredients (object)
+ text: `Pasteurisierte KUHMILCH, Speisesalz, Kümmel, ...` (required, string)
+ additives: `Irgendwelche Additive` (required, string)
+ allergenic: `Milch und -erzeugnisse` (required, string)

## ProductFeature (object)
+ code: `bm_weight_drained` (required, string)
+ label: `Abtropfgewicht Menge` (required, string)
+ value: `480g` (required, string)

## Attributes (object)
+ `characteristics` (required, array[ProductAttribute])
+ `additives` (required, array[ProductAttribute])
+ `allergetics` (required, array[ProductAttribute])

## ProductAttribute (object)
+ `id`: 17 (required, number)
+ `name`: AttributeName (required, string)

## Voucher (object)
+ `code`: ZEIT13 (required, string)

## Cart (object)
+ minimumValue: 35.00 (required, number) ... mindestbestellwert
+ currentValue: 120.00 (required, number) ... current cart value´
+ voucher: ZEIT13 (required, string)
+ products (required, array[CartProduct])
+ totals (required, array[CartTotal])

## CartProduct (object)
+ productId: 123 (required, number)
+ rootCategoryId: 1234 (required, number)
+ quantity: 2 (required, number) 
+ price: 12.99 (required, number)
+ rowPrice: 25.98 (required, number)
+ discount: 10 (required, number)
+ unitId: 64 (required, number)
+ unitTitle: Kg (required, string)
+ deposit: 2.38 (required, number)
+ name: Fleisch der besten klasse (required, string)
+ packing: 500 Packung (required, string)
+ units (required, array[ProductUnit])
+ images (required, ProductImages)

## FavoriteProduct (object)
+ _description: `Same like CartProduct but without quantity and rowPrice` (required, string)
+ productId: 2352312 (required, number)
+ rootCategoryId: 2429 (required, number)
+ price: 12.99 (required, number)
+ discount: 10 (required, number)
+ unitId: 64 (required, number)
+ unitTitle: Kg (required, string)
+ deposit: 2.38 (required, number)
+ name: Fleisch der besten klasse (required, string)
+ packing: 500 Packung (required, string)
+ units (required, array[ProductUnit])
+ images (required, ProductImages)

## CartTotal (object)
+ code: grand_total (required, string) ... identifier of this total
+ label: Warenwert (required, string) ... label of this total
+ value: 19.00 (required, number) ... value of this total

## CartProductUpdate (object)
+ `quantity`: 200 (required, number)
+ `unitId`: 17 (required, number)
+ `comment` (optional, string)

## Category (object)
+ `id`: 1 (required, number)
+ `level`: 1 (required, number)
+ `name`: "Obst & Gemüse" (required, string)
+ `browserUrl`: "obst-und-gemuese.html" (required, string)
+ `children` (required, array[SubCategory])

## SubCategory (object)
+ `id`: 2 (required, number)
+ `level`: 2 (required, number)
+ `name`: "Äpfel" (required, string)
+ `browserUrl`: "aepfel.html" (required, string)
+ `children` (optional, array[SubCategory])

## CategoryCollection (object)
+ `categories` (required, array[Category])

## ContentBlock (object)
+ `identifier`: `surcharge_info` (required, string)
+ `title`: `Beverage Delivery Charge` (required, string)
+ `content`: `Ab der 4. Getr&auml;nkekiste berechnen wir 0.50 &euro; Zuschlag pro Kiste. Wir behalten uns vor, bei Bestellmengen von mehr als 8 Kisten, diese zu reduzieren.` (required, string)

## ContentPage (object)
+ `identifier`: `privacy-policy-cookie-restriction-mode` (required, string)
+ `title`: `Datenschutzerklärung` (required, string)
+ `headline`: `Datenschutzerklärung` (required, string)
+ `content`: `<p>Verantwortlich f&uuml;r den Inhalt und Vertragspartner f&uuml;r alle Bestellungen...` (required, string)

## ContentSliderCollection (object)
+ sliders (required, array[ContentSlider])

## ContentSlider (object)
+ _description: `"targetData" will only serve data relevant to "target"` (required, string)
+ name: `Verival` (required, string)
+ position: 2 (required, number)
+ image: `http://static.exmaple.com/mobile.png` (required, string)
+ target: search (required, enum[string])
+ targetData (required, ContentLinkData)

## ContentLinkData (object)
+ categoryId: 2312 (required, string)
+ campaign: angebote (required, string)

## Favorites (object)
+ `products` (required, array[FavoriteProduct])

## Payment (object)
+ `method`: paypal (required, string)

## PaymentCollection (object)
+ `default`: `paypal`, `some-other-payment`, `need-to-check` (required, enum[string])
+ `payments` (required, array[Payment])

## ProductSearch (object)
+ totalElements: 125 (required, number)
+ type: search, product (required, enum[string])
+ products (required, array[Product])
+ categories (required, array[ProductSearchCategory])
+ filters (required, array[ProductSearchCustomFilter])

## ProductSearchCategory (object)
+ id: 1 (required, number)
+ level: 1 (required, number)
+ name: `Obst & Gemüse` (required, string)
+ browserUrl: `obst-und-gemuese.html` (required, string)
+ total: 17 (required, number)
+ children (required, array[ProductSearchCategorySub])

## ProductSearchCategorySub (object)
+ id: 2 (required, number)
+ level: 2 (required, number)
+ name: `Äpfel` (required, string)
+ browserUrl: `obst-und-gemuese/aepfel.html` (required, string)
+ total: 5 (required, number)
+ children: null (required, string)

## ProductSearchCustomFilter (object)
+ id: bmbrand (required, string)
+ name: Marken (required, string)
+ items: (required, array[ProductSearchCustomFilterItem])

## ProductSearchCustomFilterItem (object)
+ id: 1012 (required, number)
+ name: Uncle Bens (required, string)
+ active: true (required, boolean)
+ total: 17 (required, number)

## UserOrderCollection (object)
+ `orders` (required, array[UserOrderShort])

## UserOrderShort (object)
+ orderId: 81231242 (required, string)
+ createdAt: `2016-08-15T07:00:00+0200` (required, string)
+ status: processing, complete (required, enum[string])
+ canCancel: true (required, boolean)
+ productsCount: 7 (required, number)
+ reservation (required, CapacityReservation)

## UserOrder (object)
+ orderId: 81231242 (required, string)
+ createdAt: `2016-08-15T07:00:00+0200` (required, string)
+ status: processing, complete (required, enum[string])
+ canCancel: true (required, boolean)
+ productsCount: 7 (required, number)
+ payment: paypal (required, string)
+ reservation (required, CapacityReservation)
+ billing (required, Address)
+ shipping (required, Address)
+ totals (required, array[CartTotal])
+ products (required, array[CartProduct])

## UserOrderCancelation (object)
+ status: canceled (required, enum[string])
+ reason: `not-present-at-delivery`, `order-double`, `not-interessted`, `found-cheaper`, `order-change`, `other` (required, enum[string])

## UserOrderPaymentPaypalRequest (object)
+ returnUrl: `https://any.domain.com/#/return-url-which-api-does-not-care` (required, string)
+ cancelUrl: `https://any.domain.com/#/cancel-url-which-api-does-not-care` (required, string)

## UserOrderCreate (object)
+ `shippingAddressId` (required, string)
+ `billingAddressId` (required, string)
+ `payment` (required, array[PaymentPaypal, PaymentEcKarte, PaymentCashOnDelivery, PaymentRatePayDebit, PaymentRatePayRechnung])

## PaymentEcKarte (object)
+ `method`: ec_karte (required, string)
+ `default`: false (required, boolean)
+ `options` (required, object)

## PaymentCashOnDelivery (object)
+ `method`: cashondelivery (required, string)
+ `default`: false (required, boolean)
+ `options` (required, object)

## PaymentPaypal (object)
+ `method`: paypal_express (required, string)
+ `default`: false (required, boolean)
+ `options` (required, PaymentOptionsPaypal)

## PaymentRatePayDebit (object)
+ `method`: ratepay_directdebit (required, string)
+ `default`: true (required, boolean)
+ `options` (required, PaymentOptionsRatePayDebit)

## PaymentRatePayRechnung (object)
+ `method`: ratepay_rechnung (required, string)
+ `default`: true (required, boolean)
+ `options` (required, PaymentOptionsRatePayRechnung)

## PaymentOptionsPaypal (object)
+ token: `EC-1235125125` (required, string)

## PaymentOptionsRatePayDebit (object)
+ accountHolder: Kartenbesitzer (required, string)
+ accountIban: DE46111122222333300 (required, string)
+ accountNumber: 123456789 (required, string)
+ accountBank: 20010000 (required, string)
+ taxNumber: DE123123123 (required, string)

## PaymentOptionsRatePayRechnung (object)
+ taxNumber: DE123123123 (required, string)

## UserOrderProductCollection (object)
+ `products` (required, array[Product])

## UserToken (object)
+ `token`: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJqdGkiOiIxNDhhNjcyNC03YzE4LTQ5YzgtYTU2My03MzYxMjQ4NDFhYWEiLCJzdWIiOiIxMDAwMCIsImlhdCI6MTIzMTIzMTI0LCJleHAiOjEyMzEyMzEyNCwicm9sZSI6InVzZXIifQ.jBWr633JVC1c7rH3x4NgsGaCfKr3SVJfz8q5kXRV1II` (required, string)

## UserTokenGuest (object)
+ `token`: `eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiI2Mzg0MzAiLCJpYXQiOjEyMzEyMzEyNCwiZXhwIjoxMjMxMjMxMjQsInJvbGUiOiJndWVzdCJ9.k2VGkZl9JSD69s0es6hay9dx_Dhu6cthkVDrnkdsJW8` (required, string)

## UserPassword (object)
+ `password`: `my-new-password` (required, string)

## UserPasswordResetRequest (object)
+ `username`: `john.doe@example.net` (required, string)

## UserPasswordReset (object)
+ `_example_incoming_url`: `/#/customer/account/resetpassword/?id=:id&token=:token`
+ `id`: `id-param-from-url` (required, string)
+ `token`: `token-param-from-url` (required, string)
+ `password`: `my-new-password` (required, string)

## UserAuthentication (object)
+ username: `john.doe@example.com` (required, string)
+ password: `my-secret-password` (required, string)

## UserAuthenticationGuest (object)
+ zipcode: `80333` (required, number)

## UserAccount (object)
+ `id`: 123123 (required, string)
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `newsletter`: false (required, boolean)
+ `email`: john.doe@example.com (required, string)
+ `shipping` (required, Address)

## UserNewsletter (object)
+ `_example_subscribe_url`: `/#/newsletter/subscriber/confirm?id=:id&code=:code`
+ `_exmaple_unsubscribe_url`: `/#//newsletter/subscriber/unsubscribe?id=:id&code=:code`
+ `id`: 14651 (required, number)
+ `code`: qjlvx8peoyx7zl4nni5zaoz22anrw4cu (required, string)

## UserRegistration (object)
+ `zipcode`: 80333 (required, string)
+ `email`: john.doe@example.com (required, string)
+ `password`: `my-secret-password` (required, string)
+ `gender`: male, female, company (required, enum[string])
+ `firstname`: John (required, string)
+ `lastname`: Doe (required, string)
+ `birthdate`: `1989-01-01` (required, string)
+ `newsletter`: false (required, boolean)
+ `company`: My Company GmbH (required, string)
+ `department`: IT Department (required, string)

## ResponseTokenBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID (required, enum[string])
+ errors (required, array)

## ResponseTokenUnauthorized (object)
+ error: TOKEN_EXPIRED (required, enum[string])
+ errors (required, array)

## ResponseLoginBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID, USERNAME_MISSING, PASSWORD_MISSING, USERNAME_INVALID (required, enum[string])
+ errors (required, array)

## ResponseRequestResetPasswordBadRequest (object)
+ error: USERNAME_MISSING (required, enum[string])
+ errors (required, array)

## ResponseResetPasswordBadRequest (object)
+ error: USER_ID_MISSING, RESET_TOKEN_MISSING, PASSWORD_MISSING (required, enum[string])
+ errors (required, array)

## ResponseResetPasswordConflict (object)
+ error: RESET_TOKEN_EXPIRED, RESET_TOKEN_INVALID (required, enum[string])
+ errors (required, array)

## ResponseCartAddProductBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID, QUANTITY_MISSING, QUANTITY_SHOULD_BE_POSITIVE, UNIT_MISSING (required, enum[string])
+ errors (required, array)

## ResponseCartUnauthorized (object)
+ error: TOKEN_EXPIRED, CART_INVALID (required, enum[string])
+ errors (required, array)

## ResponseCartAddProductConflict (object)
+ error: PRODUCT_UPDATED_WITH_ERRORS (required, enum[string])
+ errors (required, array[string])

## ResponseCartAddProductValidation (object)
+ error: PRODUCT_UNIT_INVALID (required, enum[string])
+ errors (required, array)

## ResponseCartAddCouponConflict (object)
+ error: COUPON_CODE_INVALID, COUPON_CODE_ALREADY_APPLIED (required, enum[string])
+ errors (required, array)

## ResponseCartAddCouponValidationFailed (object)
+ error: COUPON_CODE_TOO_SHORT (required, enum[string])
+ errors (required, array)

## ResponseCartRemoveCouponValidationFailed (object)
+ error: COUPON_CODE_TOO_SHORT (required, enum[string])
+ errors (required, array)

## ResponseCapacitiesBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID, ZIPCODE_MISSING, STARTDATE_MISSING, STARTDATE_INVALID, ENDDATE_MISSING, ENDDATE_INVALID (required, enum[string])
+ errors (required, array)

## ResponseCapacitiesValidation (object)
+ error: ZIPCODE_INVALID (required, enum[string])
+ errors (required, array)

## ResponseCapacityReservationConflict (object)
+ error: CAPACITY_GONE (required, enum[string])
+ errors (required, array)

## ResponseCreateOrderBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID, SHIPPING_MISSING, BILLING_MISSING, RESERVATION_MISSING, PAYMENT_MISSING (required, enum[string])
+ errors (required, array)

## ResponseCreateOrderValidation (object)
+ error: SHIPPING_INVALID, BILLING_INVALID, RESERVATION_INVALID, PAYMENT_INVALID (required, enum[string])
+ errors (required, array)

## ResponsePaymentPaypalTokenCreated (object)
+ redirectUrl: `https://www.sandbox.paypal.com/webscr?cmd=_express-checkout&token=EC-247632764G583315C&useraction=continue` (required, string)

## ResponsePaymentPaypalTokenConflict (object)
+ error: CART_INVALID (required, enum[string])

## ResponsePaymentPaypalTokenGatwayTimeout (object)
+ error: TIMEOUT_TRY_AGAIN (required, enum[string])

## ResponseUserOrderCancellationBadRequest (object)
+ error: TOKEN_MISSING, TOKEN_INVALID, ORDER_STATUS_INVALID (required, enum[string])
+ errors: (required, array)

## ResponseUserOrderCancellationConflict (object)
+ error: ORDER_CANCEL_INVALID (required, enum[string])
+ errors: (required, array)

## ResponseUserNewsletterBadRequest (object)
+ error: NEWSLETTER_ID_MISSING, NEWSLETTER_CODE_MISSING (required, enum[string])
+ errors (required, array)

## ResponseUserNewsletterConflict (object)
+ error: NEWSLETTER_CODE_INVALID (required, enum[string])
+ errors (required, array)