FORMAT: 1A
HOST: http://api.bm.dev/api

# BM_Shop
This is a api documentation for our shop functionality. 
This should cover mainly all operations which are currently available on the current client-server rendered shop.


## Authentication
This API uses JWT as a authentication layer. 

The parameters that are needed to be sent are as follows:

+ `Authorization: Bearer {token}`
+ `Authorization: Bearer header.payload.signature`



# Group Capacity management

## Capacities [/capacities{?zipCode,startDate,endDate}]

### Retrieve available capacities [GET /capacities{?zipCode,startDate,endDate}]

+ Request
    + Headers
        
        Authorization: Bearer {token}

+ Parameters
    + zipCode (required, string, `12312`) ... zipcode where you want to fetch the capacity for
    + startDate (required, datetime, ``) ... start date for the matrix
    + endDate (required, datetime, ``) ... end date for the matrix

+ Response 200 (application/json)

    + Attributes (CapacityCollection)

### Reserve a capacity slot [POST /capacities/{capacityId}]

+ Request
    + Headers
        
        Authorization: Bearer {token}

+ Parameters
    + capacityId (required, string, `a38914b5-5988-436d-bd6c-8c0a7edaacd5`) ... capacityId

+ Response 200 (application/json)

    + Attributes (CapacityReservation)


## Slot reservations [/capacity-reservations/{id}]

+ Parameters
    + id (required, string, `a38914b5-5988-436d-bd6c-8c0a7edaacd5`) ... reservation identifier


### Retrieve reserved slot infromation [GET]

+ Response 200 (application/json)

    + Attributes (CapacityReservation)

# Group Catalog Search / Product Details

## Categories [/categories]

### Retrieve category tree [GET]

+ Response 200 (application/json)

    + Attributes (CategoryCollection)

## Products [/products{?q,catId,limit,offset,sort,sortDir,additives,allergetics,characteristics}]

### Product search [GET /products{?q,catId,limit,offset,sort,sortDir,additives,allergetics,characteristics}]

+ Parameters
    + q (optional, string, `Toma`) ... search term
    + catId (optional, integer, `2`) ... categoryId to filter for
    + browserUrl (optional, integer, `kase-eier-milchprodukte.html`) ... categoryId to filter for
    + limit (optional, integer, `10`) ... amount of elements for the result set (default: 10)
    + offset (optional, integer, `0`) ... offset from where to start search (default: 0)
    + sort (optional, string, `price`) ... sort mechanismn (one of: price, popularity)
    + sortDir (optional, string, `desc`) ... sort direction (one of: asc, desc)
    + additives (optional, array[integer], `10,12`) ... array of additives filterIds
    + allergetics (optional, array[integer], `10,12`) ... array of allergetic filterIds
    + characteristics (optional, array[integer], `10,12`) ... array of characteristics filterIds

+ Response 200 (application/json)

    + Attributes (ProductSearch)

### Product details [GET /products/{productId}]

+ Parameters
    + productId: `1230012` (required, string)

+ Response 200 (application/json)

    + Attributes (Product)

# Group cart management

## Cart [/cart]

### Carts [GET]

+ Response 200 (application/json)

    + Attributes (Cart)

## Cart handling for products [/cart/products/{productId}]

+ Parameters
    + productId: 1231231 (required, string) ... productId


### Add product [PUT]

+ Request (application/json)
    + Headers 

            Authorization: Bearer {token}
            
    + Attributes (CartProductUpdate)

+ Response 200 (application/json)

        item got updated

        + Attributes (CartTotals)
        
+ Response 201 (application/json)

        item got added to cart

        + Attributes (CartTotals)

+ Response 409 (application/json) 

        conflict (max quantity reached)

+ Response 422 (application/json)

        validation error (quantity or comment)

### Remove product [DELETE]

+ Request
    + Headers 

            Authorization: Bearer {token}

+ Response 204

+ Response 409 (application/json)

        conflict (unable to remove from cart)

## Cart handling for coupon codes [/cart/coupons/{code}]

+ Parameters
    + code: `ZEIT13` (required, string)

### Add coupon [PUT]

+ Request
    + Headers 

            Authorization: Bearer {token}

+ Response 200 (application/json)

        + Attributes (CartTotals)
        
+ Response 201 (application/json)

        + Attributes (CartTotals)

+ Response 409 

        coupon code is invalid (expired, not applicable, ..)

### Remove coupon [DELETE]

+ Request
    + Headers 

            Authorization: Bearer {token}

+ Response 204 (application/json)


# Group content management

## Blocks (partial content) [/content-blocks/{id}]

+ Parameters
    + id (required, string, `some-nice-identifier-mobile`) ... identifier of the content block


### Retrieve content [GET]

+ Response 200 (application/json)

        + Attributes (ContentBlock)
    
+ Response 404 (application/json)
    
+ Response 410 (application/json)


## Pages (full content like imprint page) [/content-pages/{id}]

+ Parameters
    + id (required, string, `some-page-identifier`) ... identifier of the content page


### Retrieve content [GET]

+ Response 200 (application/json)

    + Attributes (ContentPage)
    
+ Response 404 (application/json)
    
+ Response 410 (application/json)

# Group user favorites

## Favorites [/user/favorites]

### Favorites [GET]
fetch favorites from last orders

+ Response 200 (application/json)

    + Attributes (Favorites)


## Favorites By ProductId [/user/favorites/{productId}]

+ Parameters
    + productId: `2131241` (required, string) ... productId of the product to remove from favs


### Remove from favorites [DELETE]

+ Response 204 (application/json)


# Group user auth management

## Account [/user]

### Get account details [GET]

+ Response 200 (application/json)

    + Attributes (UserAccount)

## Credentials [/login]

### Authenticate as user [POST]

+ Request (application/json)
    + Attributes (UserAuthentication)

+ Response 200 (application/json)
    
    + Attributes (UserToken)

+ Response 401


### Authenticate as guest [POST /login/guest]

+ Request (application/json)
    + Attributes (UserGuestAuthentication)

+ Response 200 (application/json)

    Some description
    
    + Body
    
    + Attributes (UserToken)

+ Response 401


### Regenerate token [POST /login/regenerate]

+ Request (application/json)
    + Headers 
    
        Authentication: Bearer header.content.signature

+ Response 200 (application/json)

    Some description
    
    + Body
    
    + Attributes (UserToken)

+ Response 401

        
### Logout [DELETE /login]

+ Request (application/json)

    + Attributes (UserAuthentication)

+ Response 204 (application/json)

+ Response 400 (application/json)

## Register [/register]

### Register [POST]
register a user account

+ Request (application/json)
    + Attributes (UserRegistration)

+ Response 200 (application/json)

        + Attributes (UserToken)

+ Response 409 

        User email already existent

## Password [/user/password]

### Password [POST]
update password as logged in user

+ Request (application/json)

    + Attributes (UserPassword)

+ Response 200 (application/json)


## Password By Email [/passwords/{email}]

+ Parameters
    + email: `john.doe@bringmeister.de` (required, string) ... email address of the customer-account


### PasswordByEmail [POST]
update password from reset password flow

+ Request (application/json)
    + Attributes (UserPasswordReset)

+ Response 200 (application/json)

        + Attributes (UserToken)

+ Response 409



### PasswordByEmail [DELETE]
trigger reset password for a specific email

+ Response 204 (application/json)


# Group user order management

## Orders [/user/orders]

### Orders [GET]
get list of user orders

+ Response 200 (application/json)

    Return a collection of shop orders

    + Attributes (UserOrderCollection)

### Orders [POST]
create a new order

+ Request (application/json)
    + Attributes (UserOrderCreate)

+ Response 200 (application/json)

        Order created

        + Attributes (UserOrder)

+ Response 409 

        Order persistance failed

+ Response 422 

        Order validation failed




## Payments [/user/payments]

### Payments [GET]
get active payment methods

+ Response 200 (application/json)

    + Attributes (PaymentCollection)


## Orders By OrderId [/user/orders/{orderId}]
customers specific orderId

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId


### OrdersByOrderId [GET]
get details of an order

+ Response 200 (application/json)

        + Attributes (UserOrder)

+ Response 404 

        Order not found

## Orders Products By OrderId [/user/orders/{orderId}/products]
customers specific orderId

+ Parameters
    + orderId: 1019558370 (required, string)


### OrdersProductsByOrderId [GET]
get all products within a order

+ Response 200 (application/json)

        + Attributes (UserOrderProductCollection)

+ Response 404


## Orders Cancel By OrderId [/user/orders/{orderId}/cancel]
customers specific orderId

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId to cancel


### OrdersCancelByOrderId [POST]
cancel a specific order

+ Request (application/json)
    + Attributes (UserOrderCancelation)

+ Response 202 (application/json)

+ Response 409


## Orders Reorder By OrderId [/user/orders/{orderId}/reorder]

+ Parameters
    + orderId: 1019558370 (required, string) ... orderId to reorder


### OrdersReorderByOrderId [POST]
cancels internally the order, prefills the cart with the products and keeps the timeslot

+ Response 202 (application/json)

        accepted, order cancelled and cart is prefilled

        + Attributes (Dynamic)

+ Response 409 

        could not reorder the order




## Orders Cart By OrderId [/user/orders/{orderId}/cart]

+ Parameters
    + orderId (required, integer) ... orderId to put into cart


### OrdersCartByOrderId [POST]
replace the current shopping cart with the items from the order

+ Response 200 (application/json)

        + Attributes (CartTotals)

# Group user address management

## Addresses [/user/addresses]

### Addresses [GET]
fetch all addresses for the customer

+ Request
    + Headers
    
            Authorization: Bearer {token}

+ Response 200 (application/json)
    + Attributes (AddressCollection)

### Addresses [POST]
create a new address for the customer

+ Request (application/json)
    + Headers 

            Authorization: Bearer {token}
    
    + Attributes (Address)

+ Response 200 (application/json)

    new address got created

    + Attributes (AddressRead)


## Addresses By Id [/user/addresses/{id}]

+ Parameters
    + id (required, integer, `309430`) ... AddressId which you want to work with


### AddressesById [GET]
fetch all available addresses

+ Request (application/json)
    + Headers 

            Authorization: Bearer {token}

+ Response 200 (application/json)

    + Attributes (AddressRead)

### AddressesById [PUT]

+ Request (application/json)
    + Headers 

            Authorization: Bearer {token}

+ Response 204 (application/json)

### AddressesById [DELETE]

+ Request (application/json)
    + Headers 

            Authorization: Bearer {token}

+ Response 204 (application/json)


# Data Structures

## Address (object)


### Properties
+ `type`: billing (optional, string) 
+ `gender`: male|female|company (optional, string) 
+ `company`: Bringmeister (optional, string) 
+ `department`: IT-Department (optional, string) 
+ `firstname`: John (optional, string) 
+ `lastname`: Doe (optional, string) 
+ `street`: Beusselstraße (optional, string) 
+ `housenumber`: 44n-q (optional, string) 
+ `zipcode`: 10799 (optional, string) 
+ `email`: john.doe@bringmeister.de (optional, string) 
+ `hint`: 1st Floor, 2nd Elevator (optional, string) 
+ `elevator`: true (boolean, optional) 
+ `floor`: 1 (number, optional) 
+ `phonenumber`: 00491736458189 (optional, string) 


## AddressRead (object)


### Properties
+ `id` (optional, string) 
+ `type` (optional, string) 
+ `gender` (optional, string) 
+ `company` (optional, string) 
+ `department` (optional, string) 
+ `firstname` (optional, string) 
+ `lastname` (optional, string) 
+ `street` (optional, string) 
+ `housenumber` (optional, string) 
+ `zipcode` (optional, string) 
+ `email` (optional, string) 
+ `hint` (optional, string) 
+ `elevator` (boolean, optional) 
+ `floor` (number, optional) 
+ `phonenumber` (optional, string) 


## AddressCollection (object)


### Properties
+ `addresses` (array[AddressRead], optional) 


## CapacitySlotMeta (object)


### Properties
+ `id` (optional, string) 
+ `startTime` (optional, string) 
+ `endTime` (optional, string) 


## CapacityCollection (object)


### Properties
+ `zipCode` (optional, string) 
+ `startDate` (optional, string) 
+ `endDate` (optional, string) 
+ `slots` (array[CapacitySlotMeta], optional) 
+ `days` (array[CapacityDayCollection], optional) 


## CapacityDayCollection (object)


### Properties
+ `date` (optional, string) 
+ `slots` (array[CapacityDaySlot], optional) 


## CapacityDaySlot (object)


### Properties
+ `id` (optional, string) 
+ `slot` (number, optional) 
+ `status` (optional, string) 
+ `price` (number, optional) 


## CapacityReservation (object)


### Properties
+ `id` (optional, string) 
+ `startDateTime` (optional, string) 
+ `endDateTime` (optional, string) 
+ `expiryDateTime` (optional, string) 
+ `price` (number, optional) 


## Cart (object)


### Properties
+ `products` (array[Product], optional) 
+ `vouchers` (array[Voucher], optional) 
+ `totals` (CartTotals, optional) 


## Product (object)


### Properties
+ `id` (optional, string) 
+ `sku` (optional, string) 
+ `name` (optional, string) 
+ `description` (optional, string) 
+ `manufacturer` (optional, string) 
+ `brand` (optional, string) 
+ `available` (boolean, optional) 
+ `images` (ProductImages, optional) 
+ `units` (array[ProductUnit], optional) 
+ `prices` (ProductPrice, optional) 
+ `packing` (ProductPacking, optional) 
+ `nutrition` (ProductNutrition, optional) 
+ `additional` (ProductAdditional, optional) 
+ `attributes` (Attributes, optional) 


## ProductImages (object)


### Properties
+ `list` (object, optional) 
+ `detail` (array[object], optional) 


## ProductUnit (object)


### Properties
+ `id` (number, optional) 
+ `name` (optional, string) 
+ `default` (boolean, optional) 


## ProductPrice (object)


### Properties
+ `_exampleFormula` (optional, string) 
+ `_exampleValues` (optional, string) 
+ `price` (number, optional) 
+ `specialPrice` (number, optional) 
+ `specialPriceDiscount` (number, optional) 
+ `basePrice` (number, optional) 
+ `basePriceCalcValue` (number, optional) 
+ `basePriceCalcUnit` (optional, string) 
+ `deposit` (number, optional) 


## ProductPacking (object)


### Properties
+ `_exampleFormula1` (optional, string) 
+ `_exampleFormula2` (optional, string) 
+ `_exampleFormula3` (optional, string) 
+ `_exampleFormula4` (optional, string) 
+ `quantity` (optional, string) 
+ `baseQuantity` (number, optional) 
+ `unit` (optional, string) 
+ `circa` (boolean, optional) 
+ `innerPackingType` (optional, string) 
+ `outerPackingType` (optional, string) 


## ProductNutrition (object)


### Properties
+ `reference_value` (optional, string) 
+ `calories` (optional, string) 
+ `cabohydrates` (optional, string) 
+ `fat` (optional, string) 
+ `fatSaturated` (optional, string) 
+ `fatUnsaturated` (optional, string) 
+ `fiber` (optional, string) 
+ `proteins` (optional, string) 
+ `sodium` (optional, string) 
+ `sugar` (optional, string) 
+ `alcohol` (optional, string) 


## ProductAdditional (object)


### Properties
+ `legalText` (optional, string) 
+ `tradingClass` (optional, string) 
+ `ingredients` (optional, string) 
+ `additives` (optional, string) 
+ `allergenics` (optional, string) 
+ `additional` (optional, string) 
+ `warehousing` (optional, string) 
+ `antioxidants` (optional, string) 
+ `characteristic` (optional, string) 


## Attributes (object)


### Properties
+ `characteristics` (array[ProductAttribute], optional) 
+ `additives` (array[ProductAttribute], optional) 
+ `allergetics` (array[ProductAttribute], optional) 


## ProductAttribute (object)


### Properties
+ `id` (number, optional) 
+ `name` (optional, string) 


## Voucher (object)


### Properties
+ `type` (optional, string) 
+ `name` (optional, string) 
+ `code` (optional, string) 


## CartTotals (object)


### Properties
+ `subtotal` (number, optional) 
+ `deposit` (number, optional) 
+ `delivery` (number, optional) 
+ `beverages` (number, optional) 
+ `grandtotal` (number, optional) 


## CartProductUpdate (object)


### Properties
+ `quantity` (number, required) 
+ `unit` (number, required) 
+ `comment` (optional, string) 


## Category (object)


### Properties
+ `id` (number, optional) 
+ `level` (number, optional) 
+ `name` (optional, string) 
+ `children` (array[SubCategory], optional) 


## SubCategory (object)


### Properties
+ `id` (number, optional) 
+ `level` (number, optional) 
+ `name` (optional, string) 
+ `children` (optional, string) 


## CategoryCollection (object)


### Properties
+ `categories` (array[Category], optional) 


## ContentBlock (object)


### Properties
+ `title` (optional, string) 
+ `content` (optional, string) 


## ContentPage (object)


### Properties
+ `title` (optional, string) 
+ `headline` (optional, string) 
+ `content` (optional, string) 


## Favorites (object)


### Properties
+ `categories` (array[FavoriteCategory], optional) 


## FavoriteCategory (object)


### Properties
+ `id` (number, optional) 
+ `name` (optional, string) 
+ `total` (number, optional) 
+ `products` (array[Product], optional) 


## Payment (object)

### Properties
+ `method` (optional, string) 


## PaymentCollection (object)

### Properties
+ `payments` (array[Payment], optional) 


## ProductSearchFilter (object)

### Properties
+ `id` (number, optional) 
+ `name` (optional, string) 
+ `total` (number, optional) 


## ProductSearchFilterCategory (object)

### Properties
+ `level` (number, optional) 


## ProductSearch (object)

### Properties
+ `totalElements` (number, optional) 
+ `products` (array[Product], optional) 
+ `categories` (array[ProductSearchFilterCategory], optional) 
+ `filters` (Filters, optional) 


## Filters (object)

### Properties
+ `characteristics` (array[ProductSearchFilter], optional) 
+ `allergetics` (array[ProductSearchFilter], optional) 
+ `additives` (array[ProductSearchFilter], optional) 


## UserOrderCollection (object)

### Properties
+ `orders` (array[UserOrderShort], optional) 


## UserOrderShort (object)

### Properties
+ `orderId` (required, string) 
+ `createdAt` (required, string) 
+ `customerId` (required, string) 
+ `status` (required, string) 
+ `payment` (required, string) 
+ `totals` (required, CartTotals) 
+ `delivery` (required, CapacityReservation) 
+ `productsCount` (required, number) 
+ `products` (required, array[Product]) 


## UserOrderCancelation (object)

### Properties
+ `reason` (optional, string) 


## UserOrder (object)

### Properties
+ `orderId` (optional, string) 
+ `createdAt` (optional, string) 
+ `customerId` (optional, string) 
+ `status` (optional, string) 
+ `products` (number, optional) 
+ `payment` (optional, string) 
+ `totals` (CartTotals, optional) 
+ `delivery` (CapacityReservation, optional) 
+ `billing` (Address, optional) 
+ `shipping` (Address, optional) 


## UserOrderCreate (object)

### Properties
+ `shippingAddressId` (number, optional) 
+ `billingAddressId` (number, optional) 
+ `reservationId` (optional, string) 
+ `payment` (Payment39, optional) 


## Payment39 (object)

### Properties
+ `method`: paypal (optional, string) 
+ `default`: true (boolean, optional) 
+ `options` (object, optional) 


## UserOrderProductCollection (object)

### Properties
+ `products` (required, array[Product]) 

## UserToken (object)

### Properties
+ `token`: TestToken (required, string) 


## UserPassword (object)

### Properties
+ `password`: `my-new-password` (required, string) 


## UserPasswordReset (object)

### Properties
+ `token`: sometoken (required, string) 
+ `password`: `my-new-password` (required, string) 


## UserAuthentication (object)

### Properties
+ email: `john.doe@bringmeister.de` (required, string) 
+ password: `my-secret-password` (required, string) 


## UserGuestAuthentication (object)

### Properties
+ zipCode: `80333` (required, number) 


## UserAccount (object)

### Properties
+ `id`: 123123 (optional, string) 
+ `firstname`: John (optional, string) 
+ `lastname`: Doe (optional, string) 
+ `newsletter`: false (boolean, optional) 
+ `email`: john.doe@bm.de (optional, string) 
+ `shipping` (Address, optional) 


## UserRegistration (object)

### Properties
+ `email`: john.doe@bm.de (required, string) 
+ `password`: `my-secret-password` (required, string) 
+ `gender`: male, female, company (required, enum[string]) 
+ `firstname`: John (required, string) 
+ `lastname`: Doe (required, string) 
+ `birthdate`: 1989-01-01 (required, string) 
+ `newsletter`: false (boolean, required) 
+ `company`: Bringmeister GmbH (optional, string) 
+ `department`: IT-Department (optional, string)